name: 'Ledit Agent'
description: 'Automatically solve GitHub issues using AI-powered code generation with ledit'
author: 'Alan Price'

branding:
  icon: 'code'
  color: 'blue'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
  
  # AI Provider Configuration
  ai-provider:
    description: 'AI provider to use (openai, openrouter, groq, deepinfra, ollama, cerebras, deepseek)'
    required: true
  
  ai-model:
    description: 'AI model to use (e.g., gpt-4o, claude-3-opus, etc.)'
    required: true
  
  ai-api-key:
    description: 'API key for the selected AI provider'
    required: true
  
  # Ledit Configuration
  ledit-version:
    description: 'Ledit version to install (e.g., v1.0.0, latest)'
    required: false
    default: 'latest'
  
  timeout-minutes:
    description: 'Timeout for the ledit agent in minutes'
    required: false
    default: '10'
  
  # MCP Configuration
  enable-mcp:
    description: 'Enable MCP GitHub integration for PR interactions'
    required: false
    default: 'true'
  
  mcp-github-token:
    description: 'GitHub token for MCP (defaults to github-token if not specified)'
    required: false
  
  # Advanced Configuration
  max-iterations:
    description: 'Maximum iterations for the ledit agent'
    required: false
    default: '20'
  
  debug:
    description: 'Enable debug logging'
    required: false
    default: 'false'
  
  workspace-dir:
    description: 'Working directory for ledit'
    required: false
    default: '.'

outputs:
  success:
    description: 'Whether the issue was successfully processed'
    value: ${{ steps.main.outputs.success }}
  
  pr-number:
    description: 'Pull request number if created'
    value: ${{ steps.main.outputs.pr-number }}
  
  pr-url:
    description: 'Pull request URL if created'
    value: ${{ steps.main.outputs.pr-url }}
  
  branch-name:
    description: 'Branch name created/updated'
    value: ${{ steps.main.outputs.branch-name }}
  
  commit-sha:
    description: 'Latest commit SHA'
    value: ${{ steps.main.outputs.commit-sha }}

runs:
  using: 'composite'
  steps:
    - name: Setup environment
      shell: bash
      run: |
        echo "LEDIT_ACTION_PATH=${{ github.action_path }}" >> $GITHUB_ENV
        echo "LEDIT_WORKSPACE=${{ inputs.workspace-dir }}" >> $GITHUB_ENV
        echo "LEDIT_TIMEOUT=${{ inputs.timeout-minutes }}" >> $GITHUB_ENV
        echo "LEDIT_DEBUG=${{ inputs.debug }}" >> $GITHUB_ENV
    
    - name: Install dependencies
      shell: bash
      run: |
        # Install Go if not present
        if ! command -v go &> /dev/null; then
          echo "Installing Go..."
          curl -sL https://go.dev/dl/go1.21.5.linux-amd64.tar.gz | sudo tar -C /usr/local -xzf -
          echo 'export PATH=$PATH:/usr/local/go/bin' >> $GITHUB_ENV
          echo 'export PATH=$PATH:$HOME/go/bin' >> $GITHUB_ENV
          export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
        fi
        
        # Install jq for JSON parsing
        sudo apt-get update && sudo apt-get install -y jq
    
    - name: Install ledit
      shell: bash
      run: |
        ${{ github.action_path }}/scripts/install-ledit.sh "${{ inputs.ledit-version }}"
    
    - name: Configure ledit
      shell: bash
      env:
        AI_PROVIDER: ${{ inputs.ai-provider }}
        AI_MODEL: ${{ inputs.ai-model }}
        AI_API_KEY: ${{ inputs.ai-api-key }}
        MAX_ITERATIONS: ${{ inputs.max-iterations }}
      run: |
        ${{ github.action_path }}/scripts/configure-ledit.sh
    
    - name: Configure MCP
      if: inputs.enable-mcp == 'true'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.mcp-github-token || inputs.github-token }}
      run: |
        ${{ github.action_path }}/scripts/configure-mcp.sh
    
    - name: Run main workflow
      id: main
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        LEDIT_TIMEOUT_MINUTES: ${{ inputs.timeout-minutes }}
        LEDIT_DEBUG: ${{ inputs.debug }}
      timeout-minutes: ${{ fromJSON(inputs.timeout-minutes) + 5 }}
      run: |
        ${{ github.action_path }}/scripts/main.sh